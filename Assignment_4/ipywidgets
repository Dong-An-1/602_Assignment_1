import numpy as np
import matplotlib.pyplot as plt
import ipywidgets as widgets
from ipywidgets import interact, VBox, HBox, HTML

# Function to plot the normal distribution
def plot_distribution(mean, std_dev, scale_factor):
    # Generate x values, fixed to the range [-10, 10]
    x = np.linspace(-10, 10, 500)
    # Calculate y values using the normal distribution formula, apply the scale factor
    y = (1/(std_dev * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean)/std_dev)**2) * scale_factor
    
    # Create the plot
    plt.figure(figsize=(8, 5))
    plt.plot(x, y)
    
    # Add a vertical line for the mean
    plt.axvline(mean, color='r', linestyle='--')
    
    # Highlight standard deviation areas
    highlight_std_area(x, y, mean, std_dev)
    
    # Set title and labels
    plt.title(f"Normal Distribution (Mean: {mean}, Std Dev: {std_dev}, Scale: {scale_factor})")
    plt.xlabel("x")
    plt.ylabel("Probability Density")
    
    # Fix both x and y axes ranges so they do not change when sliders are moved
    plt.xlim(-10, 10)  # Fix x-axis range
    plt.ylim(0, 1.5)   # Fix y-axis range
    
    # Display grid and the plot
    plt.grid(True)
    plt.show()

# Function to highlight the areas within 1 and 2 standard deviations
def highlight_std_area(x, y, mean, std_dev):
    plt.fill_between(x, y, where=((x > mean - std_dev) & (x < mean + std_dev)), color='yellow', alpha=0.3)
    plt.fill_between(x, y, where=((x > mean - 2*std_dev) & (x < mean + 2*std_dev)), color='blue', alpha=0.2)

# Function to generate explanatory text for the current plot
def get_explanation(mean, std_dev, scale_factor):
    text = f"""
    <h4>Normal Distribution Details</h4>
    <p><strong>Mean (μ):</strong> The red dashed line marks the mean at x = {mean}.</p>
    <p><strong>Std Dev (σ):</strong> The curve spread is determined by the standard deviation. 
    A smaller σ means a narrower distribution, and a larger one makes it wider.</p>
    <p>About <strong>68%</strong> of the data lies within 1 standard deviation of the mean (yellow area), 
    and <strong>95%</strong> lies within 2 standard deviations (blue area).</p>
    <p><strong>Scale Factor:</strong> The curve has been scaled by a factor of {scale_factor}, adjusting its height accordingly.</p>
    """
    return HTML(value=text)

# Define sliders and reset button
mean_input = widgets.FloatSlider(value=0, min=-5, max=5, step=0.1, description='Mean')
std_input = widgets.FloatSlider(value=1, min=0.1, max=2, step=0.1, description='Std Dev')
scale_input = widgets.FloatSlider(value=1, min=0.1, max=3, step=0.1, description='Scale')  # New scale factor slider
reset_button = widgets.Button(description="Reset")

# Function to reset slider values to defaults
def reset_values(b):
    mean_input.value = 0
    std_input.value = 1
    scale_input.value = 1  # Reset the scale factor

# Link the reset button to the reset function
reset_button.on_click(reset_values)

# Update plot and explanation based on current slider values
def update_plot(mean, std_dev, scale_factor):
    plot_distribution(mean, std_dev, scale_factor)
    display(get_explanation(mean, std_dev, scale_factor))

# Arrange controls in a horizontal box
controls = HBox([mean_input, std_input, scale_input, reset_button])

# Enable interactive updates when sliders are moved
interact(update_plot, mean=mean_input, std_dev=std_input, scale_factor=scale_input)

# Display the controls
display(controls)
